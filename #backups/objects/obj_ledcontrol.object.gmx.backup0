// 2022-05-08 19:55:58
#event properties (no comments/etc. here are saved)
parent_index = -1;
uses_physics = false;

#event create bs init
// init
var _string = "";
if(checkConnection(2) == 4 && initEx(0))
{
    _string = "LED initialized: good";
}
else
{
    _string = "LED initialized: error";
}


with(obj_gui)
{
    hobbl_com_edit_setsel(bsInitializedLabel, 0,999);
    hobbl_com_edit_replaceselection(bsInitializedLabel, 0, _string);
}
// Connect to leds
_string = "";
if(findDevice() != -1)
{
    _string = "LED connection: good";
}
else
{
    _string = "LED connection: error";
}


with(obj_gui)
{
    hobbl_com_edit_setsel(bsConnectionLabel, 0,999);
    hobbl_com_edit_replaceselection(bsConnectionLabel, 0, _string);
}


//show_debug_message("setlight: "+string(setDeviceLighting(0,0,1,50,50,50)));



#section Audio reader Init
// init
var _string = "";
if(ar_init())
{
    _string = "AudioDevice initialized: O.K.!";
}
else
{
    _string = "AudioDevice initialized: error!";
}


with(obj_gui)
{
    hobbl_com_edit_setsel(arInitializedLabel, 0,999);
    hobbl_com_edit_replaceselection(arInitializedLabel, 0, _string);
}
// Connect to ar
_string = "";
if(ar_connection_check(3) != 0)
{
    _string = "AudioDevice connection: good";
}
else
{
    _string = "AudioDevice connection: failed!";
}

with(obj_gui)
{
    hobbl_com_edit_setsel(arConnectionLabel, 0,999);
    hobbl_com_edit_replaceselection(arConnectionLabel, 0, _string);
}
#section pattern vars
enum mode {
    cycle = 1,
    audiobars = 2
}

resetLights();

MODE = 2;
brightness = 1; // all rgb values get multiplied by this
audioMultiplier = 1; // peak val gets multiplied by this
deviceSlot = 0;
maxErrors = 5;


// Cycle
turn = 0;
ledIndex = 0;

// audio visualizer
audioPeak = ar_get_peak();
ledlist = ds_list_create();

// Target Colors
leftrgb[0] = 200;
leftrg[1] = 0;
leftrgb[2]= 0;

rightrgb[0] = 0;
rightrgb[1] = 0;
rightrgb[2] = 200;

// Color registers
colors[0,0] = 0;
colors[0,1] = 0;
colors[0,2] = 0;
// Fill colors
for(var xx = 0; xx < 32; xx++)
{
    for(var yy = 0; yy < 2; yy++)
    {
        colors[xx,yy] = 0;
    }
}

with(obj_gui) // Update gui to defaults
{
    // audio
    hobbl_com_edit_setsel(setAmplitudeMultiLabel, 0,999);
    hobbl_com_edit_replaceselection(setAmplitudeMultiLabel, 0, "-> Amplitude multiplier: "+ string(obj_ledcontrol.audioMultiplier));
    //brightness
    hobbl_com_edit_setsel(setBrightnessLabel, 0,999);
    hobbl_com_edit_replaceselection(setBrightnessLabel, 0, "-> Brightness: "+ string(obj_ledcontrol.brightness));
    //errstack
    hobbl_com_edit_setsel(setErrstackLabel, 0,999);
    hobbl_com_edit_replaceselection(setErrstackLabel, 0, "-> Error Stack: "+ string(obj_ledcontrol.maxErrors));
    
    
    //left rgb
    hobbl_com_edit_setsel(setLeftRGBLabel, 0,999);
    hobbl_com_edit_replaceselection(setLeftRGBLabel, 0, "-> Left side RGB: ("+string(obj_ledcontrol.leftrgb[0])+ ","+string(obj_ledcontrol.leftrgb[1])+","+string(obj_ledcontrol.leftrgb[2])+")");
    
   //right rgb
    hobbl_com_edit_setsel(setRightRGBLabel, 0,999);
    hobbl_com_edit_replaceselection(setRightRGBLabel, 0, "-> Right side RGB: ("+string(obj_ledcontrol.rightrgb[0])+ ","+string(obj_ledcontrol.rightrgb[1])+","+string(obj_ledcontrol.rightrgb[2])+")");
}    




for (i=0; i<32; i+=1)
{
    var correct = false
    while(!correct)
    {
        correct = setLedLight(0,0,i,rightrgb[0],rightrgb[1],rightrgb[2])
    }
}


//alarm[0] = room_speed; cycle mode only

#event destroy Free
ar_release(); // release audio meter
freeDevice(0); // Release LEDS



#event alarm0 Cycle pattern

ledIndex ++;
ledIndex = ledIndex % 32;

if(ledIndex == 31)
{
turn ++;
turn = turn%3;
}


var r = getDeviceRed(0,ledIndex);
var g = getDeviceGreen(0,ledIndex);
var b = getDeviceBlue(0,ledIndex);

//resetLED(ledIndex)

lights[0] = r;
lights[1] = g;
lights[2] = b;

lights[clamp(turn,0,2)] += 20;

switch(turn)
{
    case 0:
    lights[1] = 0;
    break;
    
    case 1:
    lights[2] = 0;
    break;
    
    case 2:
    lights[0] = 0;
    break;
    
}


setDeviceLighting(0,0,ledIndex, lights[0]%255, lights[1]%255, lights[2]%255)

//setDeviceLighting(0,0,ledIndex, irandom(255), irandom(50),irandom(100))

if(MODE == mode.cycle)
{
alarm[0] = 3;
}

#event step Update audio peak

audioPeak = ar_get_peak()*audioMultiplier;

//debug("audioPeak: "+string(audioPeak));
#section Pattern Update

switch(MODE)
{
    case mode.cycle: // Cycle...
    break;
    
    case mode.audiobars: // audio responsive
        var normalizedPeak = round(audioPeak * 10); // scale 1-10
        //debug("Normalized: " + string(normalizedPeak));
        
        var maxAudioLed = power(normalizedPeak,1.5);
        maxAudioLed = clamp(maxAudioLed, 0, 31);
        
        //debug("MAL: " + string(int64(maxAudioLed)));
        
        /***
        *
        *               The laggy shit
        *
        ***/
        
        // Only continue if all LEDS have their color set accordingly
        list = ds_list_create();
        
        for (var i=maxAudioLed; i<32; i+=1)
        {
            /*var correct = (in_range(getDeviceRed(deviceSlot, i), leftrgb[0]*brightness,10) && 
                            in_range(getDeviceGreen(deviceSlot,i), leftrgb[1],10) && 
                            in_range(getDeviceBlue(deviceSlot, i), leftrgb[2], 10));*/
                            
            var correct = (in_range(getCacheRed(i), leftrgb[0]*brightness,10) && 
                            in_range(getCacheGreen(i), leftrgb[1]*brightness,10) && 
                            in_range(getCacheBlue(i), leftrgb[2]*brightness, 10));
                            
            var maxerrs = maxErrors;
            if(maxerrs < 100)
            {
                while(!correct && maxerrs > 0)
                {
                    maxerrs --;
                    correct = setLedLight(deviceSlot, 0, i, leftrgb[0]*brightness, leftrgb[1]*brightness,leftrgb[2]*brightness);
                }
            }
            else
            {
                while(!correct)
                {
                    correct = setLedLight(deviceSlot, 0, i, leftrgb[0]*brightness, leftrgb[1]*brightness,leftrgb[2]*brightness);
                }
            }
            
        };
        
        /**
        *
        *        Do the same for the right side
        *
        */
        // Only continue if all LEDS have their color set accordingly
        for (i=0; i<maxAudioLed; i+=1)
        {
            /*var correct = (in_range(getDeviceRed(deviceSlot, i), rightrgb[0]*brightness,10) && 
                            in_range(getDeviceGreen(deviceSlot,i), rightrgb[1],10)* && 
                            in_range(getDeviceBlue(deviceSlot, i), rightrgb[2], 10));*/
                            
            var correct = (in_range(getCacheRed(i), rightrgb[0]*brightness,10) && 
                            in_range(getCacheGreen(i), rightrgb[1]*brightness,10) && 
                            in_range(getCacheBlue(i), rightrgb[2]*brightness, 10));
        
            var maxerrs = maxErrors;
            if(maxerrs < 100)
            {
                while(!correct && maxerrs > 0)
                {
                    maxerrs --;
                    correct = setLedLight(deviceSlot, 0, i, rightrgb[0]*brightness, rightrgb[1]*brightness,rightrgb[2]*brightness)
                }
            }
            else
            {
                while(!correct)
                {
                    correct = setLedLight(deviceSlot, 0, i, rightrgb[0]*brightness, rightrgb[1]*brightness,rightrgb[2]*brightness)
                }
            }
        }
        
        
    break;
}

#event draw
draw_text(x,y,"fps"+string(fps_real))

#event keypress:vk_space Reset LIGHTS
resetLights();
