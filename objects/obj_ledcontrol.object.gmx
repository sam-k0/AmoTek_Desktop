<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// LED init
scr_setAnimText(obj_gui.loadingAnim, "Initializing LEDs")
var _string = "";
if(checkConnection(2) == 4 &amp;&amp; initEx(0))
{
    _string = "LED initialized: good";
}
else
{
    _string = "LED initialized: error";
    hobbl_com_dialog_showabout(0, "Error", "The communication library could not be initialized. Is the DLL present?",obj_gui.bm_main)
}


with(obj_gui)
{
    hobbl_com_edit_setsel(bsInitializedLabel, 0,999);
    hobbl_com_edit_replaceselection(bsInitializedLabel, 0, _string);
}
// Connect to leds
_string = "";
if(findDevice() != -1)
{
    _string = "LED connection: good";
}
else
{
    _string = "LED connection: error";
     hobbl_com_dialog_showabout(0, "Error", "The device could not be initialized. Is the device connected?",obj_gui.bm_main)
}


with(obj_gui)
{
    hobbl_com_edit_setsel(bsConnectionLabel, 0,999);
    hobbl_com_edit_replaceselection(bsConnectionLabel, 0, _string);
}


//show_debug_message("setlight: "+string(setDeviceLighting(0,0,1,50,50,50)));





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Audio reader Init
// init
scr_setAnimText(obj_gui.loadingAnim, "Initializing WinAudioDevice")
var _string = "";
if(ar_init())
{
    _string = "AudioDevice initialized: O.K.!";
}
else
{
    _string = "AudioDevice initialized: error!";
}


with(obj_gui)
{
    hobbl_com_edit_setsel(arInitializedLabel, 0,999);
    hobbl_com_edit_replaceselection(arInitializedLabel, 0, _string);
}
// Connect to ar
_string = "";
if(ar_connection_check(3) != 0)
{
    _string = "AudioDevice connection: good";
}
else
{
    _string = "AudioDevice connection: failed!";
}

with(obj_gui)
{
    hobbl_com_edit_setsel(arConnectionLabel, 0,999);
    hobbl_com_edit_replaceselection(arConnectionLabel, 0, _string);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// pattern vars
enum mode {
    audiobars,
    ambi,
    cycle
}

resetLights();

MODE = mode.audiobars;
brightness = 1; // all rgb values get multiplied by this
audioMultiplier = 1; // peak val gets multiplied by this
deviceSlot = 0;
// audiobars
maxErrors = 5;
maxAudioLed = 0;

// Cycle
turn = 0;
ledIndex = 0;

//------ Ambi
AMBICHECKCOOLDOWN= 2;
ambiCheckCooldown = AMBICHECKCOOLDOWN;

ambicolors[0,1] = 0; // ambicolors[ledindex, r/g/b]
for(var i = 0; i &lt; 32; i++) // Fill with default values
{
    for(var j = 0; j &lt; 2; j++)
    {
        ambicolors[i, j] = 0; // Init with 0
    }
}

//----- audio visualizer
audioPeak = ar_get_peak();
ledlist = ds_list_create();

// Target Colors
leftrgb[0] = 0;
leftrgb[1] = 0;
leftrgb[2]= 0;

rightrgb[0] = 0;
rightrgb[1] = 0;
rightrgb[2] = 0;

// These are the user defined color values
savedrgb[0,0] = leftrgb[0];
savedrgb[0,1] = leftrgb[1];
savedrgb[0,2] = leftrgb[2];
savedrgb[1,0] = rightrgb[0];
savedrgb[2,1] = rightrgb[1];
savedrgb[3,2] = rightrgb[2];
// Color registers
colors[0,0] = 0;
colors[0,1] = 0;
colors[0,2] = 0;
// Fill colors
for(var xx = 0; xx &lt; 32; xx++)
{
    for(var yy = 0; yy &lt; 2; yy++)
    {
       colors[xx,yy] = 0;
    }
}

with(obj_gui) // Update gui to defaults
{
    // audio
    hobbl_com_edit_setsel(setAmplitudeMultiLabel, 0,999);
    hobbl_com_edit_replaceselection(setAmplitudeMultiLabel, 0, "-&gt; Amplitude multiplier: "+ string(obj_ledcontrol.audioMultiplier));
    //brightness
    hobbl_com_edit_setsel(setBrightnessLabel, 0,999);
    hobbl_com_edit_replaceselection(setBrightnessLabel, 0, "-&gt; Brightness: "+ string(obj_ledcontrol.brightness));
    //errstack
    hobbl_com_edit_setsel(setErrstackLabel, 0,999);
    hobbl_com_edit_replaceselection(setErrstackLabel, 0, "-&gt; Error Stack: "+ string(obj_ledcontrol.maxErrors));
    
    
    //left rgb
    hobbl_com_edit_setsel(setLeftRGBLabel, 0,999);
    hobbl_com_edit_replaceselection(setLeftRGBLabel, 0, "-&gt; Left side RGB: ("+string(obj_ledcontrol.leftrgb[0])+ ","+string(obj_ledcontrol.leftrgb[1])+","+string(obj_ledcontrol.leftrgb[2])+")");
    
   //right rgb
    hobbl_com_edit_setsel(setRightRGBLabel, 0,999);
    hobbl_com_edit_replaceselection(setRightRGBLabel, 0, "-&gt; Right side RGB: ("+string(obj_ledcontrol.rightrgb[0])+ ","+string(obj_ledcontrol.rightrgb[1])+","+string(obj_ledcontrol.rightrgb[2])+")");
}    




for (i=0; i&lt;32; i+=1)
{
    var correct = false
    while(!correct)
    {
        correct = setLedLight(0,0,i,rightrgb[0],rightrgb[1],rightrgb[2])
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Read config file for colors
scr_setAnimText(obj_gui.loadingAnim, "Loading Config.tek")
ini_open(working_directory + "config.tek");

var str = ini_read_string("startup_config","colors", "ERR");
var conf_brightness = ini_read_real("startup_config","brightness", 1)
var conf_audioscale = ini_read_real("startup_config","audioscale", 1)
var conf_errstack = ini_read_real("startup_config","errstack", 3)
ini_close();

// Simple settings
// errstack
brightness = conf_brightness; // all rgb values get multiplied by this
audioMultiplier = conf_audioscale; // peak val gets multiplied by this
maxErrors = conf_errstack;      // The max error tries


if(str != "ERR") // default colors
{


var map = json_decode(str);


var llist = map[?"l"];

leftrgb[0] = llist[|0]
leftrgb[1] = llist[|1]
leftrgb[2] = llist[|2]

// Right
var rlist = map[?"r"];

rightrgb[0] = rlist[|0];
rightrgb[1] = rlist[|1];
rightrgb[2] = rlist[|2];

// Overdrive
savedrgb[0,0] = leftrgb[0]
savedrgb[0,1] = leftrgb[1]
savedrgb[0,2] = leftrgb[2]
savedrgb[1,0] = rightrgb[0]
savedrgb[2,1] = rightrgb[1]
savedrgb[3,2] = rightrgb[2]

// free
ds_map_destroy(map);
}

scr_updateGUIDisplay();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Destroy loading anim

with(obj_loading)
{
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free
var success = false;
for(var i = 0; i &lt; 32; i++)
{
    success = setLedLight(deviceSlot, 0, i, 0,0,0);
    while(!success)
    {
        success = setLedLight(deviceSlot, 0, i, 0,0,0);
    }
}

ar_release(); // release audio meter
gmambi_exit(); // release gmambi dc
freeDevice(0); // Release LEDS


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cycle pattern

ledIndex ++;
ledIndex = ledIndex % 32;

if(ledIndex == 31)
{
turn ++;
turn = turn%3;
}


var r = getDeviceRed(0,ledIndex);
var g = getDeviceGreen(0,ledIndex);
var b = getDeviceBlue(0,ledIndex);

//resetLED(ledIndex)

lights[0] = r;
lights[1] = g;
lights[2] = b;

lights[clamp(turn,0,2)] += 20;

switch(turn)
{
    case 0:
    lights[1] = 0;
    break;
    
    case 1:
    lights[2] = 0;
    break;
    
    case 2:
    lights[0] = 0;
    break;
    
}


setDeviceLighting(0,0,ledIndex, lights[0]%255, lights[1]%255, lights[2]%255);

//setDeviceLighting(0,0,ledIndex, irandom(255), irandom(50),irandom(100))

if(MODE == mode.cycle)
{
alarm[0] = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update audio peak

audioPeak = ar_get_peak()*audioMultiplier;

//debug("audioPeak: "+string(audioPeak));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pattern Update

switch(MODE)
{   
    case mode.audiobars: // audio responsive
        var normalizedPeak = round(audioPeak * 10); // scale 1-10
        //debug("Normalized: " + string(normalizedPeak));
        
        var maxAudioLed = power(normalizedPeak,1.5);
        maxAudioLed = clamp(maxAudioLed, 0, 31);
        
        //OVERDRIVE!!!!!!!!!!!!!!
        if(maxAudioLed &gt; 30)
        {
            
            leftrgb[0] = 255*irandom(1);
            leftrgb[1] = 255*irandom(1);
            leftrgb[2] = 255*irandom(1);
            
            rightrgb[0] = 255*irandom(1);
            rightrgb[1] = 255*irandom(1);
            rightrgb[2] = 255*irandom(1);
        }
        else
        {
            leftrgb[0] = savedrgb[0,0];
            leftrgb[1]= savedrgb[0,1];
            leftrgb[2] = savedrgb[0,2];
            rightrgb[0]= savedrgb[1,0];
            rightrgb[1]= savedrgb[2,1];
            rightrgb[2]= savedrgb[3,2]; 
        }
        
        //debug("MAL: " + string(int64(maxAudioLed)));
        
        /***
        *
        *               The laggy shit
        *
        ***/
        
        // Only continue if all LEDS have their color set accordingly
        list = ds_list_create();
        
        for (var i=maxAudioLed; i&lt;32; i+=1)
        {
            var correct = (in_range(getCacheRed(i), leftrgb[0]*brightness,10) &amp;&amp; 
                            in_range(getCacheGreen(i), leftrgb[1]*brightness,10) &amp;&amp; 
                            in_range(getCacheBlue(i), leftrgb[2]*brightness, 10));
                            
            var maxerrs = maxErrors;
            if(maxerrs &lt; 100)
            {
                while(!correct &amp;&amp; maxerrs &gt; 0)
                {
                    maxerrs --;
                    correct = setLedLight(deviceSlot, 0, i, leftrgb[0]*brightness, leftrgb[1]*brightness,leftrgb[2]*brightness);
                }
            }
            else
            {
                while(!correct)
                {
                    correct = setLedLight(deviceSlot, 0, i, leftrgb[0]*brightness, leftrgb[1]*brightness,leftrgb[2]*brightness);
                }
            }
            
        };
        
        /**
        *
        *        Do the same for the right side
        *
        */
        // Only continue if all LEDS have their color set accordingly
        for (i=0; i&lt;maxAudioLed; i+=1)
        {
            var correct = ( in_range(getCacheRed(i), rightrgb[0] * brightness,10) &amp;&amp; 
                            in_range(getCacheGreen(i), rightrgb[1]*brightness,10) &amp;&amp; 
                            in_range(getCacheBlue(i), rightrgb[2]*brightness, 10));
        
            var maxerrs = maxErrors;
            if(maxerrs &lt; 100)
            {
                while(!correct &amp;&amp; maxerrs &gt; 0)
                {
                    maxerrs --;
                    correct = setLedLight(deviceSlot, 0, i, rightrgb[0]*brightness, rightrgb[1]*brightness,rightrgb[2]*brightness);
                }
            }
            else
            {
                while(!correct)
                {
                    correct = setLedLight(deviceSlot, 0, i, rightrgb[0]*brightness, rightrgb[1]*brightness,rightrgb[2]*brightness);
                }
            }
        }
        
    break;
    
    case mode.ambi: // ambilight
    var dw = display_get_width();
    var dh = display_get_height();
    
    var stepcnt = 4;
    var stepwidth = dw/stepcnt;
    var ycheck = 32;
    
    ambiCheckCooldown -= (delta_time/1000000)*room_speed;
    
    if(ambiCheckCooldown &lt;= 0)
    {
        ambiCheckCooldown = AMBICHECKCOOLDOWN;
        
        // query screen colors and add to cache
        for(i = 0; i &lt; stepcnt; i++)
        {
            ycheck = display_get_height()/4; //32+(i*32%200);
            gmambi_add_cache(i*stepwidth,ycheck); // add to cache
        }
        
        for(i = 0; i &lt; gmambi_get_stacksize(); i++) // loop all cached entries
        {
            
            var red = gmambi_get_red_at(i);
            var green =  gmambi_get_green_at(i);
            var blue = gmambi_get_blue_at(i);
            var ledsector = (32/stepcnt);
            
            for(var j = (ledsector*i) ; j &lt; (ledsector*i)+ledsector; j++)
            {
                var ledindex = j;
                debug(string(ledindex)); // debug print of led
                // Check if already right color (with tolerance)
                var correct = (in_range( ambicolors[clamp(ledindex,0,32), 0], red*brightness,10) &amp;&amp; 
                                in_range(ambicolors[clamp(ledindex,0,32), 1], green*brightness,10) &amp;&amp; 
                                in_range(ambicolors[clamp(ledindex,0,32), 2], blue*brightness, 10));
                        
                if(correct)  // If the light is already correct (in cache) continue and do nothing  
                {
                    continue;
                }
                
                // try changing the light of the LED
                if(setLedLight(deviceSlot, 0, ledindex, red*brightness, green*brightness, blue*brightness))
                {
                    // the light was updated
                    // store in cache (with brightness applied!)
                    ambicolors[clamp(ledindex,0,32), 0] = red*brightness;
                    ambicolors[clamp(ledindex,0,32), 1] = green*brightness;
                    ambicolors[clamp(ledindex,0,32), 2] = blue*brightness;
                }
            }
        }       
        gmambi_cache_clear(); // reset the cache
    }
    
    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free
var success = false;
for(var i = 0; i &lt; 32; i++)
{
    success = setLedLight(deviceSlot, 0, i, 0,0,0);
    while(!success)
    {
        success = setLedLight(deviceSlot, 0, i, 0,0,0);
    }
}

ar_release(); // release audio meter
gmambi_exit(); // release gmambi dc
freeDevice(0); // Release LEDS


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw preview and render
draw_set_font(fnt_overdrive)

sprw = sprite_get_width(spr_ledicon);
for (i=0; i&lt;32; i+=1)
{
    draw_sprite_ext(spr_ledicon, 0, (room_width - sprw-5)-sprw*i, room_height/2,1,1,0,make_color_rgb(colors[i,0],colors[i,1],colors[i,2] ),brightness)
    draw_set_colour(-1)
};

// Text
draw_set_color(c_black)
draw_text(x,y,"LED Preview - fps: "+string(fps_real))




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset LIGHTS
resetLights();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
